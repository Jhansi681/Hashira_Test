import java.math.BigInteger;
import java.util.*;
import java.util.regex.*;

public class PolynomialConstantFinder {

    // Convert a base-n string to decimal BigInteger
    public static BigInteger baseToDecimal(String value, int base) {
        return new BigInteger(value, base);
    }

    // Parse JSON and find the constant c
    public static BigInteger parseAndFindConstant(String jsonString) {
        // Extract n and k using regex
        Pattern keysPattern = Pattern.compile("\"keys\"\\s*:\\s*\\{[^}]*\"n\"\\s*:\\s*(\\d+)[^}]*\"k\"\\s*:\\s*(\\d+)[^}]*\\}");
        Matcher keysMatcher = keysPattern.matcher(jsonString);
        int n = 0, k = 0;
        if (keysMatcher.find()) {
            n = Integer.parseInt(keysMatcher.group(1));
            k = Integer.parseInt(keysMatcher.group(2));
        }

        System.out.println("Number of roots (n): " + n);
        System.out.println("Minimum roots required (k): " + k);
        System.out.println();

        // Extract each root: base and value
        Pattern rootPattern = Pattern.compile("\"(\\d+)\"\\s*:\\s*\\{[^}]*\"base\"\\s*:\\s*\"([^\"]+)\"[^}]*\"value\"\\s*:\\s*\"([^\"]+)\"[^}]*\\}");
        Matcher rootMatcher = rootPattern.matcher(jsonString);

        Map<Integer, BigInteger> rootsDecimal = new TreeMap<>();
        List<BigInteger> rootValues = new ArrayList<>();

        while (rootMatcher.find()) {
            int idx = Integer.parseInt(rootMatcher.group(1));
            String baseStr = rootMatcher.group(2);
            String valueStr = rootMatcher.group(3);

            int base = Integer.parseInt(baseStr);

            // Convert to decimal
            BigInteger decimalValue = baseToDecimal(valueStr, base);
            rootsDecimal.put(idx, decimalValue);
            rootValues.add(decimalValue);
        }

        // Print results
        for (int i = 1; i <= n; i++) {
            if (rootsDecimal.containsKey(i)) {
                System.out.println("Root " + i + ": decimal = " + rootsDecimal.get(i));
            } else {
                System.out.println("Root " + i + ": not found");
            }
        }

        // Calculate constant c using Vieta's formula: c = (-1)^n * (product of all roots)
        BigInteger constantC = BigInteger.ONE;
        for (BigInteger root : rootValues) {
            constantC = constantC.multiply(root);
        }
        
        // Apply sign based on number of roots
        if (n % 2 == 1) {
            constantC = constantC.negate();
        }

        return constantC;
    }

    public static void main(String[] args) {
        // Test case 1
        String jsonInput1 = "{\n" +
                "  \"keys\": {\n" +
                "    \"n\": 4,\n" +
                "    \"k\": 3\n" +
                "  },\n" +
                "  \"1\": {\n" +
                "    \"base\": \"10\",\n" +
                "    \"value\": \"4\"\n" +
                "  },\n" +
                "  \"2\": {\n" +
                "    \"base\": \"2\",\n" +
                "    \"value\": \"111\"\n" +
                "  },\n" +
                "  \"3\": {\n" +
                "    \"base\": \"10\",\n" +
                "    \"value\": \"12\"\n" +
                "  },\n" +
                "  \"6\": {\n" +
                "    \"base\": \"4\",\n" +
                "    \"value\": \"213\"\n" +
                "  }\n" +
                "}";

        System.out.println("=== Test Case 1 ===");
        BigInteger constant1 = parseAndFindConstant(jsonInput1);
        System.out.println("\nConstant c: " + constant1);
        System.out.println();

        // Test case 2
        String jsonInput2 = "{\n" +
                "  \"keys\": {\n" +
                "    \"n\": 10,\n" +
                "    \"k\": 7\n" +
                "  },\n" +
                "  \"1\": {\n" +
                "    \"base\": \"6\",\n" +
                "    \"value\": \"13444211440455345511\"\n" +
                "  },\n" +
                "  \"2\": {\n" +
                "    \"base\": \"15\",\n" +
                "    \"value\": \"aed7015a346d635\"\n" +
                "  },\n" +
                "  \"3\": {\n" +
                "    \"base\": \"15\",\n" +
                "    \"value\": \"6aeeb69631c227c\"\n" +
                "  },\n" +
                "  \"4\": {\n" +
                "    \"base\": \"16\",\n" +
                "    \"value\": \"e1b5e05623d881f\"\n" +
                "  },\n" +
                "  \"5\": {\n" +
                "    \"base\": \"8\",\n" +
                "    \"value\": \"316034514573652620673\"\n" +
                "  },\n" +
                "  \"6\": {\n" +
                "    \"base\": \"3\",\n" +
                "    \"value\": \"2122212201122002221120200210011020220200\"\n" +
                "  },\n" +
                "  \"7\": {\n" +
                "    \"base\": \"3\",\n" +
                "    \"value\": \"20120221122211000100210021102001201112121\"\n" +
                "  },\n" +
                "  \"8\": {\n" +
                "    \"base\": \"6\",\n" +
                "    \"value\": \"20220554335330240002224253\"\n" +
                "  },\n" +
                "  \"9\": {\n" +
                "    \"base\": \"12\",\n" +
                "    \"value\": \"45153788322a1255483\"\n" +
                "  },\n" +
                "  \"10\": {\n" +
                "    \"base\": \"7\",\n" +
                "    \"value\": \"1101613130313526312514143\"\n" +
                "  }\n" +
                "}";

        System.out.println("=== Test Case 2 ===");
        BigInteger constant2 = parseAndFindConstant(jsonInput2);
        System.out.println("\nConstant c: " + constant2);
    }
}
